#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        import numpy as np
        print("‚úÖ NumPy:", np.__version__)
    except ImportError as e:
        print("‚ùå NumPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", e)
        return False
    
    try:
        import cv2
        print("‚úÖ OpenCV:", cv2.__version__)
    except ImportError as e:
        print("‚ùå OpenCV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", e)
        return False
    
    try:
        import sklearn
        print("‚úÖ Scikit-learn:", sklearn.__version__)
    except ImportError as e:
        print("‚ùå Scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", e)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º InsightFace
    try:
        from insightface.app import FaceAnalysis
        print("‚úÖ InsightFace –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        try:
            app = FaceAnalysis(name="buffalo_l", providers=["CPUExecutionProvider"])
            app.prepare(ctx_id=-1, det_size=(640, 640))
            print("‚úÖ InsightFace –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print("‚ö†Ô∏è InsightFace –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:", e)
            return False
            
    except ImportError as e:
        print("‚ùå InsightFace –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", e)
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install insightface")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        import faiss
        print("‚úÖ FAISS –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è FAISS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    try:
        import networkx as nx
        print("‚úÖ NetworkX –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è NetworkX –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    print("\nüéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
    return True

def test_cluster_module():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å cluster"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è cluster...")
    
    try:
        from cluster import build_plan_live, _INSIGHTFACE_OK
        print("‚úÖ –ú–æ–¥—É–ª—å cluster –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"‚úÖ InsightFace —Å—Ç–∞—Ç—É—Å: {_INSIGHTFACE_OK}")
        
        if _INSIGHTFACE_OK:
            print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—Ü")
        else:
            print("‚ùå InsightFace –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except ImportError as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ cluster:", e)
        return False
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ cluster:", e)
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π FaceSort\n")
    
    success = test_imports()
    if success:
        success = test_cluster_module()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("pip install -r requirements.txt")
