#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

def test_clustering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from cluster import build_plan_live
        print("‚úÖ –ú–æ–¥—É–ª—å cluster –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_dir = Path("test_images")
    if not test_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {test_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –°—á–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_files = [f for f in test_dir.iterdir() if f.suffix.lower() in {'.jpg', '.jpeg', '.png', '.bmp', '.tif', '.tiff', '.webp'}]
    print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {test_dir}")
    
    if len(image_files) == 0:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def progress_callback(message, percent=None):
        if percent is not None:
            print(f"üìä {percent}%: {message}")
        else:
            print(f"üìù {message}")
    
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
        result = build_plan_live(
            test_dir,
            progress_callback=progress_callback
        )
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:")
        print(f"  - –ö–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('clusters', {}))}")
        print(f"  - –§–∞–π–ª–æ–≤ –≤ –ø–ª–∞–Ω–µ: {len(result.get('plan', []))}")
        print(f"  - –ù–µ—á–∏—Ç–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(result.get('unreadable', []))}")
        print(f"  - –§–∞–π–ª–æ–≤ –±–µ–∑ –ª–∏—Ü: {len(result.get('no_faces', []))}")
        
        if 'error' in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        clusters = result.get('clusters', {})
        if clusters:
            print("\nüìÅ –î–µ—Ç–∞–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
            for cluster_id, files in clusters.items():
                print(f"  –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {len(files)} —Ñ–∞–π–ª–æ–≤")
                for file_path in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    print(f"    - {Path(file_path).name}")
                if len(files) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
        
        print("\n‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ FaceSort\n")
    
    success = test_clustering()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º.")
        sys.exit(1)
